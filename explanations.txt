----------------------------------------
Start and run
----------------------------------------
$ sudo systemctl start docker
$ sudo usermod -aG docker liz
$ cat /etc/group | grep docker
---> docker:x:972:liz
$ docker run hello-world
----------------------------------------
Check
----------------------------------------
docker images
docker container ls -a
docker ps -a -s --- (size)
----------------------------------------
Cleaning up
----------------------------------------
docker container rm container-id
docker container prune
docker rmi name-of-image
docker image prune -a
----------------------------------------
Building image
----------------------------------------

docker tag imagename:tagname
$ docker build -f Dockerfile.debug .
This will use a file called Dockerfile.debug for the build instructions instead of Dockerfile.

----------------------------------------
Running image & stopping container
----------------------------------------
docker run -d <image>      --- detached (in background)
docker run -d --rm -it --name tagname     ---  -i is “interactive, connect STDIN” and -t “allocate a pseudo-TTY”. --rm in order to remove it automatically after it has exited. This means that there is no garbage containers left behind.
docker stop <container id or name>
docker exec <container-id>	--- Executes a command inside the container 

----------------------------------------
Volume mounting
----------------------------------------
When you use a bind mount, a file or directory on the host machine is mounted into a container. Bind mounts rely on the host machine’s filesystem having a specific directory structure available.
When you use a volume, a new directory is created within Docker’s storage directory on the host machine, and Docker manages that directory’s contents.

 -v creates a directory if the file does not exist.

docker run -v $(pwd):/mydir youtube-dl https://imgur.com/JY5tHqr
it downloads the file with success


----------------------------------------
Hub
----------------------------------------
docker run -d nginx
docker run postgres
docker search hello-world
docker pull ubuntu

----------------------------------------
Dockerfile
----------------------------------------
# Command to build and tag/name: docker build -t docker-clock . 
# Command to run container and clock: docker run docker-clock

# The base image:
FROM devopsdockeruh/overwrite_cmd_exercise

# When something depends on another command, it’s best practise to run them together, like this:
RUN apt-get update && apt-get install -y wget 

# This will be executed when using "docker run"
CMD ["/bin/bash"]
CMD [" -c"]




Useful links:
https://nodejs.org/de/docs/guides/nodejs-docker-webapp/

Opening a connection from outside world to a docker container happens in two steps:
Exposing port - tell Docker that the container listens to a certain port. (EXPOSE <port>)
Publishing port - Docker will map containers ports to host (your machine) ports. (run the container with -p <host-port>:<container-port>) If you leave out the host port and only specify the container port, docker will automatically choose a free port as the host port.

The docker port command can be used to list the port mappings for a container:
$ docker run -d -p 4567 app-in-port
$ docker port 0249

limit connections to certain protocol only by adding the protocol at the end: 
EXPOSE 4567/udp 
and 
-p 1234:4567/udp




